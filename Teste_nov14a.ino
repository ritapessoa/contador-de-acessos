
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Teste"
  https://create.arduino.cc/cloud/things/8e829207-03cf-4d7e-b4a4-8a3bc7b77e10 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int ocupacao;
  bool builtInLED;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// DEFINIÇÕES
#define pinSensorA 3
#define pinSensorB 8

#define SensorA_  1
#define SensorB_ -1

#define DETECTADO 0

#define tempoEspera 1000

// DECLARAÇÃO DE VARIÁVEIS
boolean leituraSensorA;
boolean leituraSensorB;

int estadoSensores = 0;
int estadoSensoresAnt = 0;

unsigned long controleTempo;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(pinSensorA, INPUT_PULLUP);
  pinMode(pinSensorB, INPUT_PULLUP);

  Serial.println("Setup concluído");
}

void loop() {
  ArduinoCloud.update();

  // Your code here

  // LEITURA DOS SENSORES
  leituraSensorA = digitalRead(pinSensorA);
  leituraSensorB = digitalRead(pinSensorB);
  
  if(leituraSensorA == DETECTADO && leituraSensorB == DETECTADO){
    controleTempo = millis();
    
  } else if(leituraSensorA == DETECTADO || leituraSensorB == DETECTADO){
    
    if(leituraSensorA == DETECTADO){
      
      switch (estadoSensoresAnt){
        case SensorB_ :{
          estadoSensores = 0;
          ocupacao--;
          controleTempo = millis();
          break;
        }
        case 0 :{
          estadoSensores = SensorA_;
          controleTempo = millis();
          break;
        }
        case SensorA_ :{
          estadoSensores = SensorA_;
          controleTempo = millis();
          break;
        }
      }
     
      
    }
    
    if(leituraSensorB == DETECTADO){
      
      switch (estadoSensoresAnt){
        case SensorA_ :{
          estadoSensores = 0;
          ocupacao++;
          controleTempo = millis();
          break;
        }
        case 0 :{
          estadoSensores = SensorB_;
          controleTempo = millis();
          break;
        }
        case SensorB_ :{
          estadoSensores = SensorB_;
          controleTempo = millis();
          break;
        }
      }
     
    }
   
  }else {
    if ( millis() - controleTempo > tempoEspera ) {
      estadoSensores = 0;
      estadoSensoresAnt = estadoSensores;
    }
  }


  estadoSensoresAnt = estadoSensores;

}

void onBuiltInLEDChange() {
  // Do something
  digitalWrite(LED_BUILTIN, builtInLED);

}

void onOcupacaoChange() {
  // Do something
}





void onOcupaoChange() {
  // Do something
}

